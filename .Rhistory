langues
langues<-langues %>% dplyr::mutate(parle=rowSums(langues,starts_with("q24a"))
langues
langues<-langues %>% dplyr::mutate(parle=rowSums(starts_with("q24a"))
langues
langues<-langues %>% dplyr::mutate(parle=rowSums(starts_with("q24a"))
langue
langues<-langues %>% dplyr::mutate(parle=rowSums(select(langues,starts_with("q24a"))))
langues<-langues %>% dplyr::mutate(parle=rowSums(select(.,starts_with("q24a"))))
library(readxl)
library(dplyr)
library(tidyverse)
library(rmarkdown)
library(stringr)
library(dplyr)
langues<-langues %>% dplyr::mutate(parle=rowSums(select(.,starts_with("q24a"))))
langues
langues<-langues %>% dplyr::mutate(parle=rowSums(select(starts_with("q24a"))))
langues<-langues %>% dplyr::mutate(parle=rowSums(select(.,starts_with("q24a"))))
langues
langues<-data.frame(projet%>%dplyr::select("key",starts_with("q24a")))
langues
langues<-langues %>% dplyr::mutate(parle=rowSums(select(.,starts_with("q24a"))))
langues
```{r}getwd()
section_description <- projet %>% dplyr::select(-key)##Dans cette expression, nous utilisons l'opérateur `--avant le nom de la colonne que nous
source("~/GUEYE AISSATA_PROJET R.R", echo=TRUE)
install.packages("rmarkdown")
## la variable key n'a aucune valeur manquante
VMK<data.frame(is.na(projet,select(key)))
## la variable key n'a aucune valeur manquante
VMK<data.frame(is.na(.,select(key)))
## la variable key n'a aucune valeur manquante
VMK<is.na(.,select(key))
## la variable key n'a aucune valeur manquante
VMK<projet::is.na(.,select(key))
## la variable key n'a aucune valeur manquante
VMK<projet,is.na(.,select(key))
library(readxl)
library(dplyr)
library(tidyverse)
library(rmarkdown)
library(stringr)
projet<-read_excel("Base_Partie 1.xlsx")
View(projet)
section_description <- projet %>% dplyr::select(-key)##Dans cette expression, nous utilisons l'opérateur `--avant le nom de la colonne que nous
section_description
valeurs_manquantes<-colSums(is.na(projet))
tab<-data.frame(variable=names(valeurs_manquantes),valeurs_manquantes=valeurs_manquantes)
print(tab)
# Calculer le nombre de valeurs manquantes par variable
valeurs_manquantes <- colSums(is.na(projet))
#valeurs_manquantes
# Calculer la proportion des valeurs manquantes par variable
somme<-sum(valeurs_manquantes)
somme
proportions <- valeurs_manquantes/somme
proportions
# Créer le tableau résumé
tableau_resume <- data.frame(valeurs_manquantes, proportions)
# Afficher le résultat
print(tableau_resume)
## la variable key n'a aucune valeur manquante
#[VMK<projet,is.na(.,select(key))
## Création de variable
projet<-rename(projet,region=q1)##la fonction rename est une fonction de base R permet de renommer le nom des var
projet<-rename(projet,departement=q2)
projet<-rename(projet,sexe=q23)
View(projet)
projet<-projet %>% dplyr::mutate(sexe_2 = ifelse(sexe =="Femme","1","0"))#mutate()de dplyr pour créer une nouvelle variable appelée sexe_2. La fonction ifelse()est utilisée pour assignersexe_2lorsque la valeur de lasexeest "femme", sinon
View(projet)
langues<-data.frame(projet%>%dplyr::select("key",starts_with("q24a")))
langues
langues<-langues %>% dplyr::mutate(parle=rowSums(select(.,starts_with("q24a"))))
langues
langue<-dplyr::select(key,parle)
##selection de key et parle
langue<-langues%>%dplyr::select(key,parle)
langue
##merger les deux data frame
New_projet<-merge(projet,langues)
New_projet
langues<-langues%>%dplyr::select(key,parle)
langues
New_projet<-merge(projet,langues)
New_projet
#2 analyse descriptive
table(New_projet$sexe)
table(New_projet$niveau_instruction)
table0(New_projet$niveau_instruction)
table(New_projet$niveau_instruction)
table
table(New_projet$niveau_instruction, na.rm())
tableau_univarie <- matrix(0, nrow = 0, ncol = 2)
tableau_univarie
#Répartition des PME selon le sexe
table(New_projet$niveau_instruction)
#Répartition des PME selon le sexe
table(New_projet$q25)
#Répartition des PME selon le sexe
table(New_projet$sexe)
repartion_sexe<-table(New_projet$sexe)
tableau_univarie <- rbind(tableau_univarie, repartition_sexe)
repartition_sexe<-table(New_projet$sexe)
tableau_univarie <- rbind(tableau_univarie, repartition_sexe)
tableau_univarie
repartition_N.I<-table(New_projet$q25)
tableau_univarie <- rbind(tableau_univarie, repartition_N.I)
tableau_univarie
tableau_univarie
tableau_univarie <- cbind(tableau_univarie, repartition_N.I)
tableau_univarie <- rbind(tableau_univarie, repartition_N.I)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(dplyr)
library(tidyverse)
library(rmarkdown)
library(stringr)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(dplyr)
library(tidyverse)
library(rmarkdown)
library(stringr)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(dplyr)
library(tidyverse)
library(rmarkdown)
library(stringr)
projet<-read_excel("Base_Partie 1.xlsx")
View(projet)
section_description <- projet %>% dplyr::select(-key)##Dans cette expression, nous utilisons l'opérateur -avant le nom de la variable dont on a pas besoins
section_description
# Calculer le nombre de valeurs manquantes par variable
valeurs_manquantes <- colSums(is.na(projet))
#valeurs_manquantes
# Calculer la proportion des valeurs manquantes par variable
somme<-sum(valeurs_manquantes)
somme
proportions <- valeurs_manquantes/somme
proportions
# Créer le tableau résumé
tableau_resume <- data.frame(valeurs_manquantes, proportions)
# Calculer le nombre de valeurs manquantes par variable
valeurs_manquantes <- colSums(is.na(projet))
# Calculer la proportion des valeurs manquantes par variable
somme<-sum(valeurs_manquantes)
somme
proportions <- valeurs_manquantes/somme
# Créer le tableau résumé
tableau_resume <- data.frame(valeurs_manquantes, proportions)
# Afficher le résultat
print(tableau_resume)
VMK<projet%>%is.na(.,select(key))
key<projet%>%is.na(.,select(key))
key<projet%>%is.na(select(key))
key<projet%>%is.na(key)
projet<-rename(projet,region=q1)##la fonction rename est une fonction de base R permet de renommer le nom des variables
projet<-rename(projet,departement=q2)
projet<-rename(projet,sexe=q23)
View(projet)
projet<-projet %>% dplyr::mutate(sexe_2 = ifelse(sexe =="Femme","1","0"))#mutate()de dplyr pour créer une nouvelle la variable sexe_2. La fonction ifelse()est utilisée pour assigner sexe_2 à 1 lorsque la valeur de la variable est sexe est "femme", sinon à 0
View(projet)
langues<-data.frame(projet%>%dplyr::select("key",starts_with("q24a")))
langues
langues<-langues %>% dplyr::mutate(parle=rowSums(select(.,starts_with("q24a"))))
langues
langues<-langues%>%dplyr::select(key,parle)
langues
New_projet<-merge(projet,langues)
New_projet
library(kableExtra)
install.packages("kableExtra")
install.packages("kableExtra")
library(kableExtra)
tableau_univarie <- matrix(0, nrow = 0, ncol = 2)
library(kableExtra)
repartition_sexe<-table(New_projet$sexe)
repartition_sexe<-table(New_projet$sexe)
repartition_sexe<-table(New_projet$sexe)
install.packages("kableExtra")
library(readxl)
library(dplyr)
library(tidyverse)
library(rmarkdown)
library(stringr)
library(kableExtra)
knitr::opts_chunk$set(echo = TRUE)
install.packages("kableExtra")
library(readxl)
library(dplyr)
library(tidyverse)
library(rmarkdown)
library(stringr)
library(kableExtra)
projet<-read_excel("Base_Partie 1.xlsx")
View(projet)
section_description <- projet %>% dplyr::select(-key)##Dans cette expression, nous utilisons l'opérateur -avant le nom de la variable dont on a pas besoins
section_description
# Calculer le nombre de valeurs manquantes par variable
valeurs_manquantes <- colSums(is.na(projet))
# Calculer la proportion des valeurs manquantes par variable
somme<-sum(valeurs_manquantes)
somme
proportions <- valeurs_manquantes/somme
# Créer le tableau résumé
tableau_resume <- data.frame(valeurs_manquantes, proportions)
# Afficher le résultat
print(tableau_resume)
knitr::opts_chunk$set(echo = TRUE)
install.packages("kableExtra")
library(readxl)
library(dplyr)
library(tidyverse)
library(rmarkdown)
library(stringr)
library(kableExtra)
projet<-read_excel("Base_Partie 1.xlsx")
View(projet)
section_description <- projet %>% dplyr::select(-key)##Dans cette expression, nous utilisons l'opérateur -avant le nom de la variable dont on a pas besoins
section_description
# Calculer le nombre de valeurs manquantes par variable
valeurs_manquantes <- colSums(is.na(projet))
# Calculer la proportion des valeurs manquantes par variable
somme<-sum(valeurs_manquantes)
somme
proportions <- valeurs_manquantes/somme
# Créer le tableau résumé
tableau_resume <- data.frame(valeurs_manquantes, proportions)
# Afficher le résultat
print(tableau_resume)
#key<projet%>%is.na(key)
projet<-projet %>% dplyr::mutate(sexe_2 = ifelse(sexe =="Femme","1","0"))#mutate()de dplyr pour créer une nouvelle la variable sexe_2. La fonction ifelse()est utilisée pour assigner sexe_2 à 1 lorsque la valeur de la variable est sexe est "femme", sinon à 0
projet<-projet %>% dplyr::mutate(sexe_2 = ifelse(sexe =="Femme","1","0"))#mutate()de dplyr pour créer une nouvelle la variable sexe_2. La fonction ifelse()est utilisée pour assigner sexe_2 à 1 lorsque la valeur de la variable est sexe est "femme", sinon à 0
projet<-projet %>% dplyr::mutate(sexe_2 = ifelse(sexe =="Femme","1","0"))#mutate()de dplyr pour créer une nouvelle la variable sexe_2. La fonction ifelse()est utilisée pour assigner sexe_2 à 1 lorsque la valeur de la variable est sexe est "femme", sinon à 0
library(dplyr)
projet<-projet %>% dplyr::mutate(sexe_2 = ifelse(sexe =="Femme","1","0"))#mutate()de dplyr pour créer une nouvelle la variable sexe_2. La fonction ifelse()est utilisée pour assigner sexe_2 à 1 lorsque la valeur de la variable est sexe est "femme", sinon à 0
projet<-projet %>% dplyr::mutate(sexe_2 = ifelse(sexe =="Femme","1","0"))#mutate()de dplyr pour créer une nouvelle la variable sexe_2. La fonction ifelse()est utilisée pour assigner sexe_2 à 1 lorsque la valeur de la variable est sexe est "femme", sinon à 0
projet<-rename(projet,region=q1)##la fonction rename est une fonction de base R permet de renommer le nom des variables
projet<-rename(projet,departement=q2)
projet<-rename(projet,sexe=q23)
View(projet)
projet<-projet %>% dplyr::mutate(sexe_2 = ifelse(sexe =="Femme","1","0"))#mutate()de dplyr pour créer une nouvelle la variable sexe_2. La fonction ifelse()est utilisée pour assigner sexe_2 à 1 lorsque la valeur de la variable est sexe est "femme", sinon à 0
View(projet)
langues<-data.frame(projet%>%dplyr::select("key",starts_with("q24a")))
langues
langues<-langues %>% dplyr::mutate(parle=rowSums(select(.,starts_with("q24a"))))
langues
langues<-langues%>%dplyr::select(key,parle)
langues
New_projet<-merge(projet,langues)
New_projet
getwd()
setwd("C:\\Users\\Mbare\\Documents\\projet R_2023")
getwd()
knitr::opts_chunk$set(echo = TRUE)
getwd()
library(shiny); runApp('~/rshni projet.R')
runApp('~/rshni projet.R')
runApp('~/rshni projet.R')
# Création d'un dataframe pour les marqueurs
ui <- fluidPage(
# titre de l'application
titlePanel("shiny map"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput(
inputId="pays",
label="Sélectionnez un pays",
choices=c(unique(base$pays)),
selected = c(unique(base$pays))[sample(1:length(unique(base$pays)),1)],
multiple = TRUE
),
selectInput(
inputId="evenement",
label="Sélectionnez un evenement",
choices=c(unique(base$type)),
selected = "Protests",
multiple = TRUE
),
selectInput(
inputId="annee",
label="Sélectionnez une annee",
choices=c(unique(base$annee)),
selected = "2023",
multiple = TRUE
)
),
# Show a plot of the generated distribution
mainPanel(
plotlyOutput(outputId="map",
width = "100%",
height = "720px")
)
)
)
runApp('~/rshni projet.R')
choices=c(unique(base$pays),
multiple = TRUE
selectInput(
multiple = TRUE
selectInput(
inputId="evenement",
label="Sélectionnez un evenement",
choices=c(unique(base$type)),
selected = "Protests",
multiple = TRUE
),
selectInput(
inputId="evenement",
label="Sélectionnez un evenement",
choices=c(unique(base$type)),
selected = "Protests",
multiple = TRUE
),
multiple = TRUE
selected = c(unique(base$pays))[sample(1:length(unique(base$pays)),1)]
attach(donne_art)# se fixer la base
library(readxl)
library(dplyr)
library(tidyverse)
library(rmarkdown)
library(stringr)
library(kableExtra)
library("haven")
donne_art<-read_excel("Base_Partie 2.xlsx")#donne_art,importation de la base contenant des donnés artificiel
donne_art<- rename(donne_art,destination=country_destination)## avec la fonction rename,je renomme la variable country_destination en destination
## Definissons les valeurs négative comme valeurs manquantes
donne_art$destination<-ifelse(donne_art$destination<0,NA,donne_art$destination)# avec la fonction ifelse on remplace les valeurs négatives de la variables destination par NA sinon,elles restent inchangés
##Verification s'il y'a des valeurs negatives
which(is.na(donne_art$destination))
which(donne_art$destination<0 )
table(donne_art$destination)
attach(donne_art)# se fixer la base
#Nous allons déterminer le premier quartile et le troisième quartile de la variable "age" afin de determiner le minimum et le maximum des age .
## Premier quartile
Q1<-quantile(donne_art$age)[2]
## Troisième  quartile
Q3<-quantile(donne_art$age)[4]
##calcul de la borne inferieur
born_inf=Q1-1.5*(Q3-Q2)
attach(donne_art)# se fixer la base
#Nous allons déterminer le premier quartile et le troisième quartile de la variable "age" afin de determiner le minimum et le maximum des age .
## Premier quartile
Q1<-quantile(donne_art$age)[2]
## Troisième  quartile
Q3<-quantile(donne_art$age)[4]
##calcul de la borne inferieur
born_inf=Q1-1.5*(Q3-Q1)
##calcul de la borne superieur
born_sup=Q3+1.5*(Q3-Q1)
## Detection et imputation des valeurs aberrantes par la moyenne des ages
donne_art$age_aberrante<-ifelse((donne_art$age<born_inf)|(donne_art$age>born_sup),mean(donne_art$age),donne_art$age)
##attach(partie2)
##determination des bornes de la tranche d'age
ecart<-5
bornes<-seq(min(donne_art$age_aberrante),max(donne_art$age_aberrante),by=ecart)
bornes
##decoupage de la variable age des tranches d'age
donne_art$age<-cut(donne_art$age_aberrante,breaks = bornes)
table(donne_art$age)
attach(donne_art)
donne_art<-donne_are%>% dplyr::mutate(nbre_entretien=n()%>% distinct())
attach(donne_art)
donne_art<-donne_are%>% dplyr::mutate(.,nbre_entretien=n()%>% distinct())
donne_art<-read_excel("Base_Partie 2.xlsx")#donne_art,importation de la base contenant des donnés artificiel
donne_art<- rename(donne_art,destination=country_destination)## avec la fonction rename,je renomme la variable country_destination en destination
## Definissons les valeurs négative comme valeurs manquantes
donne_art$destination<-ifelse(donne_art$destination<0,NA,donne_art$destination)# avec la fonction ifelse on remplace les valeurs négatives de la variables destination par NA sinon,elles restent inchangés
##Verification s'il y'a des valeurs negatives
which(is.na(donne_art$destination))
which(donne_art$destination<0 )
table(donne_art$destination)
attach(donne_art)
donne_art<-donne_are%>% dplyr::mutate(.,nbre_entretien=n()%>% distinct())
attach(donne_art)
donne_art<-donne_are%>% dplyr::mutate(donne_art,nbre_entretien=n()%>% distinct())
attach(donne_art)
donne_art<-donne_are%>% dplyr::mutate((nbre_entretien=n())%>% distinct())
attach(donne_art)
donne_art<-donne_are%>% dplyr::group_by(enumerator)%>%
mutatemutate((nbre_entretien=n())%>% distinct())
attach(donne_art)
donne_art<-donne_are%>% group_by(enumerator)%>%
mutatemutate((nbre_entretien=n())%>% distinct())
attach(donne_art)
donne_art<-donne_art%>% group_by(enumerator)%>%
mutatemutate((nbre_entretien=n())%>% distinct())
attach(donne_art)
donne_art<-donne_art%>% group_by(enumerator)%>%mutate((nbre_entretien=n())%>% distinct())
attach(donne_art)
donne_art<-donne_art%>% group_by(enumerator)%>%mutate((nbre_entretien=n())%>% distinct())
attach(donne_art)
donne_art<-donne_art%>%group_by(enumerator)%>%mutate((nbre_entretien=n())%>% distinct())
attach(donne_art)
donne_art<-donne_art%>%group_by(enumerator)%>%mutate((nbre_entretien=n())%>% distinct(.))
attach(donne_art)
donne_art<-donne_art%>%group_by(enumerator)%>%dplyr::mutate((nbre_entretien=n())%>% distinct())
donne_art<-read_excel("Base_Partie 2.xlsx")#donne_art,importation de la base contenant des donnés artificiel
donne_art<- rename(donne_art,destination=country_destination)## avec la fonction rename,je renomme la variable country_destination en destination
## Definissons les valeurs négative comme valeurs manquantes
donne_art$destination<-ifelse(donne_art$destination<0,NA,donne_art$destination)# avec la fonction ifelse on remplace les valeurs négatives de la variables destination par NA sinon,elles restent inchangés
##Verification s'il y'a des valeurs negatives
which(is.na(donne_art$destination))
which(donne_art$destination<0 )
table(donne_art$destination)
attach(donne_art)
donne_art<-donne_art%>%group_by(enumerator)%>%dplyr::mutate((nbre_entretien=n())%>% distinct())
attach(donne_art)
donne_art<-donne_art%>%group_by(enumerator)%>%dplyr::mutate((nbre_entretien=n())%>% distinct())
attach(donne_art)
donne_art<-donne_art%>%group_by(enumerator)%>%dplyr::mutate(nbre_entretien=n())%>% distinct()
attach(donne_art)
donne_art<-donne_art%>%group_by(enumerator)%>%dplyr::mutate(nb re_entretien=n())%>% distinct()
attach(donne_art)
donne_art<-donne_art%>%group_by(enumerator)%>%dplyr::mutate(nbre_entretien=n())%>% distinct()
attach(donne_art)
donne_art<-donne_art%>%group_by(enumerator)%>%dplyr::mutate(nbre_entretien=n())%>% distinct()
View(donne_art)
donne_art<-donne_art%>%dplyr::mutate(grp_traite=sample(0,1))
View(donne_art)
attach(donne_art)
donne_art<-donne_art%>%dplyr::mutate(grp_traite=sample(0,1))
View(donne_art)
attach(donne_art)
donne_art<-donne_art%>%dplyr::mutate(grp_traite=sample(c(0,1)))
attach(donne_art)
donne_art<-donne_art%>%dplyr::mutate(grp_traite=sample(c(0,1),size(donne_art),replace=FALSE),prob=NALL)
attach(donne_art)
donne_art<-donne_art%>%dplyr::mutate(grp_traite=sample(c(0,1),size(donne_art),replace=FALSE),prob=NULL)
attach(donne_art)
donne_art<-donne_art%>%dplyr::mutate(grp_traite=sample(c(0,1),size(donne_art),replace=FALSE,prob=NULL))
attach(donne_art)
donne_art<-donne_art%>%dplyr::mutate(grp_traite=sample(c(0,1),size(nrow(donne_art)),replace=FALSE,prob=NULL))
attach(donne_art)
donne_art<-donne_art%>%dplyr::mutate(grp_traite=sample(c(0,1),size(nrow(donne_art)),replace=TRUE,prob=NULL))
size=nrow(donne_art)
size
donne_art<-donne_art%>%dplyr::mutate(grp_traite=sample(c(0,1),size,replace=FALSE,prob=NULL))
library(dplyr)
attach(donne_art)
size=nrow(donne_art)
size
donne_art<-donne_art%>%dplyr::mutate(.,grp_traite=sample(c(0,1),size,replace=FALSE,prob=NULL))
attach(donne_art)
size=nrow(donne_art)
size
donne_art<-donne_art%>%dplyr::mutate(.,grp_traite=sample(c(0,1),size,replace=TRUE,prob=NULL))
attach(donne_art)
size=nrow(donne_art)
size
donne_art<-donne_art%>%dplyr::mutate(grp_traite=sample(c(0,1),size,replace=TRUE,prob=NULL))
attach(donne_art)
# la taille de l'échantillon avec nrow
size=nrow(donne_art)
# la fonction sample() pour affecter aléatoirement a chaque repondant un groupe de traitement
donne_art<-donne_art%>%dplyr::mutate(grp_traite=sample(c(0,1),size,replace=TRUE,prob=NULL))
attach(donne_art)
# la taille de l'échantillon avec nrow
size=nrow(donne_art)
# la fonction sample() pour affecter aléatoirement a chaque repondant un groupe de traitement
donne_art<-donne_art%>%dplyr::mutate(grp_traite=runif(size))
library(readxl)
library(dplyr)
library(tidyverse)
library(rmarkdown)
library(stringr)
library(kableExtra)
library("haven")
attach(donne_art)
# la taille de l'échantillon avec nrow
size=nrow(donne_art)
# la fonction sample() pour affecter aléatoirement a chaque repondant un groupe de traitement
donne_art<-donne_art%>%dplyr::mutate(grp_traite=runif(size),0,1)
attach(donne_art)
# la taille de l'échantillon avec nrow
size=nrow(donne_art)
# la fonction sample() pour affecter aléatoirement a chaque repondant un groupe de traitement
donne_art<-donne_art%>%dplyr :: mutate(grp_traite=runif(size),0,1)
attach(donne_art)
# la taille de l'échantillon avec nrow
size=nrow(donne_art)
# la fonction sample() pour affecter aléatoirement a chaque repondant un groupe de traitement
donne_art<-donne_art%>%dplyr :: mutate(grp_traite=runif(size),0,1)
attach(donne_art)
# la taille de l'échantillon avec nrow
size=nrow(donne_art)
# la fonction sample() pour affecter aléatoirement a chaque repondant un groupe de traitement
donne_art$donne_art%>%dplyr::mutate(grp_traite=sample(c(0,1),size,replace=TRUE,prob=NULL))
attach(donne_art)
# la taille de l'échantillon avec nrow
size=nrow(donne_art)
# la fonction sample() pour affecter aléatoirement a chaque repondant un groupe de traitement
donne_art$grp_traite<-sample(c(0,1),size,replace=TRUE,prob=NULL)
#donne_art<-donne_art%>%dplyr::mutate(grp_traite=sample(c(0,1),size,replace=TRUE,prob=NULL))
View(donne_art)
attach(donne_art)
# la taille de l'échantillon avec nrow
size=nrow(donne_art)
# la fonction sample() pour affecter aléatoirement a chaque repondant un groupe de traitement
donne_art$grp_traite<-sample(c(0,1),size,replace=TRUE,prob=NULL)
## Importation de la feuille
donne_art_f2<- data.frame(read_excel("Base_Partie 2.xlsx",sheet="district"))
## fusion des deux feuille avec la fonction merge () pour obtenir la base donne_art_taille
donne_art_taille<-donne_art%>%
merge(donne_art_f2,by="district")
View(donne_art_taille)
